{
    "name": "csharp-code-creator",
    "publisher": "spencerjames",
    "version": "0.0.2",
    "description": "Generate C# interfaces from classes and classes from interfaces.",
    "displayName": "C# Code Creator",
    "shortName": "C# Code Creator",
    "author": {
        "name": "Spencer James",
        "email": "apps@swsj.me",
        "url": "https://swsj.me/"
    },
    "homepage": "https://github.com/kokoabim/vscode-csharp-code-generator/README.md",
    "bugs": {
        "url": "https://github.com/kokoabim/vscode-csharp-code-generator/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/kokoabim/vscode-csharp-code-generator"
    },
    "license": "LICENSE.md",
    "icon": "icon/extension-512.png",
    "engines": {
        "vscode": "^1.96.0"
    },
    "categories": [
        "Snippets"
    ],
    "keywords": [
        "c#",
        "code",
        "generator",
        "creator",
        "csharp",
        "generation",
        "creation"
    ],
    "activationEvents": [],
    "main": "./dist/extension.js",
    "contributes": {
        "configuration": {
            "title": "C# Code Creator",
            "properties": {
                "csharp-code-generator.interfaceImplementations": {
                    "type": "object",
                    "markdownDescription": "On class generation from an interface, if the interface implements an interfaces defined here, its defined implementation is generated in the new class.\n\nPlaceholders: `%className%`, `%classTypeName%`, `%genericType%`, `%indent%`, `%interfaceName%`",
                    "default": {
                        "ICloneable": "public object Clone() => throw new NotImplementedException();",
                        "ICollection": "#region ICollection\npublic int Count => throw new NotImplementedException();\npublic bool IsSynchronized => throw new NotImplementedException();\npublic object SyncRoot => throw new NotImplementedException();\npublic void CopyTo(Array array, int index) => throw new NotImplementedException();\npublic IEnumerator GetEnumerator() => throw new NotImplementedException();\n#endregion",
                        "IComparable": "public int CompareTo(object? obj) => throw new NotImplementedException();",
                        "IDisposable": "#region IDisposable\nprivate bool _disposed;\n\n~%className%() => Dispose(false);\n\npublic void Dispose()\n{\n%indent%Dispose(true);\n%indent%GC.SuppressFinalize(this);\n}\n\nprotected virtual void Dispose(bool disposing)\n{\n%indent%if (_disposed) return;\n\n%indent%if (disposing)\n%indent%{\n%indent%%indent%// TODO: dispose managed managed objects\n%indent%}\n\n%indent%// TODO: dispose unmanaged objects\n\n%indent%_disposed = true;\n}\n#endregion",
                        "IEnumerable": "public IEnumerator GetEnumerator() => throw new NotImplementedException();",
                        "IEnumerable<(.+)>": "public IEnumerator<%genericType%> GetEnumerator() => throw new NotImplementedException();\n\nIEnumerator IEnumerable.GetEnumerator() => GetEnumerator();",
                        "IFormattable": "public string ToString(string? format, IFormatProvider? formatProvider) => throw new NotImplementedException();"
                    }
                },
                "csharp-code-generator.formatDocumentOnCodeGeneration": {
                    "type": "boolean",
                    "markdownDescription": "Perform the format document command after code generation.",
                    "default": true
                }
            }
        },
        "commands": [
            {
                "command": "csharp-code-generator.generate-class-from-interface",
                "title": "Generate C# Class From Interface..."
            },
            {
                "command": "csharp-code-generator.generate-interface-from-class",
                "title": "Generate C# Interface From Class..."
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run rebuild && npm prune --omit=dev",
        "compile": "npm run libclone && tsc -p ./",
        "watch": "npm run libclone && tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src",
        "test": "vscode-test",
        "clean": "./clean.sh -y",
        "libclean": "./libgit.sh -ciy",
        "libclone": "./libgit.sh -gy",
        "rebuild": "./clean.sh -iy && npm run compile"
    },
    "devDependencies": {
        "@types/node": "^22.x",
        "@types/vscode": "^1.96.0",
        "@typescript-eslint/eslint-plugin": "^8.21.0",
        "@typescript-eslint/parser": "^8.21.0",
        "@vscode/test-cli": "^0.0.10",
        "@vscode/test-electron": "^2.4.1",
        "eslint": "^9.19.0",
        "typescript": "^5.7.3"
    },
    "dependencies": {
        "glob": "^11.0.1"
    }
}